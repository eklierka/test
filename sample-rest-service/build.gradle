/*
 * Copyright 2018 Evgeniy Khyst
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    ext {
        springBootVersion = '2.0.2.RELEASE'
        springFoxVersion = '2.7.0'
        checkstyleVersion = '8.10.1'
        dockerRegistry = 'localhost:5000'
    }
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.19.2')
        classpath('org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2')
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'com.palantir.docker'
apply plugin: "org.sonarqube"

group = 'com.example'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = 1.8

configurations {
    checkstyleConfig
}

repositories {
    mavenCentral()
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile("io.springfox:springfox-swagger2:${springFoxVersion}")
    compile("io.springfox:springfox-swagger-ui:${springFoxVersion}")
    compileOnly('org.projectlombok:lombok')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    checkstyleConfig("com.puppycrawl.tools:checkstyle:${checkstyleVersion}") {
        transitive = false
    }
}

checkstyle {
    toolVersion = "${checkstyleVersion}"
    config = resources.text.fromArchiveEntry(configurations.checkstyleConfig, 'google_checks.xml')
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
check.dependsOn jacocoTestReport

docker {
    dependsOn build
    name "${dockerRegistry}/${project.group}/${bootJar.baseName}:${project.version}"
    files bootJar.archivePath
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}